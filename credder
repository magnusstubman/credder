#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#from __future__ import print_function

import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('dump', metavar='<output from secertsdump.py>.txt', help='Output from secretsdump.py -ntds ... -system ... LOCAL > dump.txt', type=argparse.FileType('r'))
parser.add_argument('-e', '--enabled-users', metavar='<list of enabled users>.txt', help='Used to only show enabled accounts. Maybe get this from bloodhound? MATCH (n:User) WHERE n.enabled = TRUE RETURN n', type=argparse.FileType('r'))
parser.add_argument('-c', '--cracked-hashes', metavar='<output from hashcat>.txt', help='Used to show cleartext passwords. File must matc houtput of hashcat --show', type=argparse.FileType('r'))
parser.add_argument('-cc', '--cracked-hashes-csv', metavar='<output from proprietary tool>.csv', help='Used to show cleartext passwords. File must matc houtput of proprietary tool', type=argparse.FileType('r'))
parser.add_argument('--username-only', help='only show usernames', default=False, required=False, action='store_true')
parser.add_argument('--ntlm-only', help='only show NTLM hashes', default=False, required=False, action='store_true')
parser.add_argument('--cleartext-only', help='only show cleartext', default=False, required=False, action='store_true')
parser.add_argument('--search-ntlm', metavar='<NTLM>', help='show all with specified NTLM hash', required=False)
parser.add_argument('--min-cleartext-length', metavar='<N>', help='show all where cleartext is at least N characters long', required=False, type=int)
parser.add_argument('--max-cleartext-length', metavar='<N>', help='show all where cleartext is at least N characters long', required=False, type=int)
parser.add_argument('--search-cleartext', metavar='<password>', help='show all with specified cleartext password', required=False)
parser.add_argument('--cracked-only', help='only show cracked', required=False, default=False, action='store_true')
parser.add_argument('--uncracked-only', help='only show uncracked', required=False, default=False, action='store_true')
parser.add_argument('-im', '--include-machines', help='include machine as well', required=False, default=False, action='store_true')
parser.add_argument('--csv', help='print comma separated', required=False, default=False, action='store_true')
parser.add_argument('--sort', help='sort output', required=False, default=False, action='store_true')
parser.add_argument('--uniq', help='omit repeated output lines', required=False, default=False, action='store_true')
parser.add_argument('--stats', help='show some statistics', required=False, default=False, action='store_true')
args = parser.parse_args()


if args.stats and not (args.cracked_hashes or args.cracked_hashes_csv):
  print('stats require --cracked-hashes!')
  sys.exit(1)

if (args.min_cleartext_length or args.max_cleartext_length) and not (args.cracked_hashes or args.cracked_hashes_csv):
  print('can\'t have --min-cleartext-length or --max-cleartext-length without --cracked-hashes!')
  sys.exit(1)

if (args.cracked_only or args.uncracked_only) and not (args.cracked_hashes or args.cracked_hashes_csv):
  print('can\'t have --cracked-only or --uncracked-only without -c!')
  sys.exit(1)

if sum([args.username_only, args.ntlm_only, args.cleartext_only]) > 1:
  print('you can only have one of these set at a time: --username-only --ntlm-only --cleartext-only')
  sys.exit(1)

if args.uncracked_only and args.cleartext_only:
  print('it makes no sense to have both --uncracked-only and --cleartext-only')
  sys.exit(1)

accounts = 0
cracked = 0
output = []
def pr(domain, username, ntlm, cleartext):
  global accounts
  global cracked

  if cleartext:
    if args.min_cleartext_length:
      if len(cleartext) < args.min_cleartext_length:
        return

    if args.max_cleartext_length:
      if len(cleartext) > args.max_cleartext_length:
        return

  if username and not args.include_machines and '$' in username:
    return

  if args.cracked_only and not cleartext:
    return

  if args.uncracked_only and cleartext:
    return

  s = [] 
  if username and not args.ntlm_only and not args.cleartext_only:
    s.append(username)
  if ntlm and not args.username_only and not args.cleartext_only:
    s.append(ntlm)
  if cleartext and not args.username_only and not args.ntlm_only:
    s.append(cleartext)
    cracked += 1

  if len(s) == 0:
    return

  accounts += 1

  delimiter = ' '
  if args.csv:
    delimiter = ','

  line = delimiter.join(s)

  if args.sort or args.uniq:
    if args.uniq and line in output:
      return
    output.append(line)
  elif not args.stats:
    print(line)


def parseDumpLine(line):
  if ':::' in line:
    parts = line.split(':')
    if len(parts) == 7:
      domain = None 
      username = parts[0] 
      ntlm = parts[3]
      if '\\' in parts[0]:
        subparts = parts[0].split('\\')
        domain = subparts[0]
        username = subparts[1]
      return (domain, username, ntlm)
  return None


def getCleartext(ntlm, crackedLines):
  ntlm = ntlm.lower()
  for line in crackedLines:
    line = line.replace('\n','')
    if ntlm in line:
      parts = line.split(':')
      if len(parts) == 2:
        return parts[1]
      else:
        print('there is something wrong with your hashcat output! (3)', file=sys.stderr)
        sys.exit(3)
  return None

def getCleartextCsv(ntlm, crackedLines):
  ntlm = ntlm.lower()
  for line in crackedLines:
    line = line.replace('\n','')
    if ntlm in line:
      parts = line.split('"')


      if len(parts) == 7:
        return parts[3]
      else:
        print('there is something wrong with your proprietary output! (3)', file=sys.stderr)
        sys.exit(3)
  return None

def readLines(f, lower):
  if f:
    f.seek(0)
    l = f.readlines()
    if lower:
      l = [x.lower() for x in l]
    l = [x.replace('\n', '') for x in l]
    return l

dumpLines = readLines(args.dump, True)
enabledLines = readLines(args.enabled_users, True)
crackedLines = readLines(args.cracked_hashes, False)
crackedLinesCsv = readLines(args.cracked_hashes_csv, False)


if args.dump:
  for line in dumpLines:
    parts = parseDumpLine(line)
    if parts:
      domain, username, ntlm = parts 

      if args.search_ntlm:
        if not ntlm == args.search_ntlm:
          continue

      if username and (not args.include_machines) and ('$' in username):
        continue

      if args.enabled_users:
        if not username in enabledLines:
          continue

      cleartext = None
      if ntlm and args.cracked_hashes:
        cleartext = getCleartext(ntlm, crackedLines)

      if ntlm and args.cracked_hashes_csv:
        cleartext = getCleartextCsv(ntlm, crackedLinesCsv)

      if args.search_cleartext:
        if not cleartext == args.search_cleartext:
          continue

      pr(domain, username, ntlm, cleartext)


if not args.stats:
  if args.sort or args.uniq:
    if args.sort:
      output.sort()
    for line in output:
      print(line)
else:
  print(str(cracked) + '/' + str(accounts) + ' (' + str(round((cracked / accounts)*100, 2)) + ' %) cracked')
