#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#from __future__ import print_function

import sys
import argparse


parser = argparse.ArgumentParser()


parser.add_argument('-sn', '--search-ntlm', help='show all accounts with this NTLM hash', required=False, nargs=1)
parser.add_argument('-co', '--cracked-only', help='only show cracked accounts', required=False, default=False, action='store_true')
parser.add_argument('-d', '--dump', metavar='<output from secertsdump.py>', help='Output from secretsdump.py -ntds ... -system ... LOCAL > dump.txt', type=argparse.FileType('r'))
parser.add_argument('-e', '--enabled-users', metavar='<list of enabled users>', help='maybe get this from bloodhound? MATCH (n:User) WHERE n.enabled = TRUE RETURN n', type=argparse.FileType('r'))
parser.add_argument('-c', '--cracked', metavar='<output from hashcat>', help='take a hashcat --show', type=argparse.FileType('r'))
args = parser.parse_args()






def getNTLM(user, dumpLines):
  user = user.lower()
  for index, value in enumerate(dumpLines):
    line = value.lower()
    if ':::' in line:
      parts = line.split(':')
      if len(parts) == 7:

        if '\\\\' in parts[0]:
          subparts = parts[0].split('\\\\') 
          if subparts[1] == user:
            return parts[3].replace('\n','')
        elif '\\' in parts[0]:
          subparts = parts[0].split('\\')
          if subparts[1] == user:
            return parts[3].replace('\n','')

        else:
          if parts[0].lower() == user:
            #del dumpLines[index]
            return parts[3].replace('\n','')
      else:
        print('there is something wrong with your secretsdump.py dump! (2)', file=sys.stderr)
        sys.exit(2)

  return None

def getCleartext(ntlm, crackedLines):

  ntlm = ntlm.lower()
		
  for line in crackedLines:
    line = line.lower().replace('\n','')
    if ntlm in line:
      parts = line.split(':')
      if len(parts) == 2:
        return parts[1]
      else:
        print('there is something wrong with your hashcat output! (3)', file=sys.stderr)
        sys.exit(3)
  return None


if args.dump and args.enabled_users and args.cracked:
  dumpLines = args.dump.readlines()
  crackedLines = args.cracked.readlines()
  enabledLines = args.enabled_users.readlines()


  for user in enabledLines:
    user = user.replace('\n', '')
    ntlm = getNTLM(user, dumpLines)
    if args.search_ntlm and ntlm != args.search_ntlm.lower():
      continue

    if ntlm:
      cleartext = getCleartext(ntlm, crackedLines)
      if cleartext:
        print(user + ' ' + ntlm + ' ' + cleartext)
      else:
        if not args.cracked_only:
          print(user + ' ' + ntlm)



