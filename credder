#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#from __future__ import print_function

import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--dump', metavar='<output from secertsdump.py>.txt', help='Output from secretsdump.py -ntds ... -system ... LOCAL > dump.txt', type=argparse.FileType('r'), required=True)
parser.add_argument('-e', '--enabled-users', metavar='<list of enabled users>.txt', help='Used to only show enabled accounts. Maybe get this from bloodhound? MATCH (n:User) WHERE n.enabled = TRUE RETURN n', type=argparse.FileType('r'))
parser.add_argument('-c', '--cracked-hashes', metavar='<output from hashcat>.txt', help='take a hashcat --show', type=argparse.FileType('r'))
parser.add_argument('-no', '--ntlm-only', help='only show NTLM hashes (unique only and sorted)', default=False, required=False, action='store_true')
parser.add_argument('-sn', '--search-ntlm', metavar='<NTLM>', help='show all accounts with specified NTLM hash', required=False)
parser.add_argument('-co', '--cracked-only', help='only show cracked accounts', required=False, default=False, action='store_true')
parser.add_argument('-uo', '--uncracked-only', help='only show uncracked accounts', required=False, default=False, action='store_true')
parser.add_argument('-im', '--include-machines', help='include machine accounts as well', required=False, default=False, action='store_true')
parser.add_argument('-csv', help='print comma separated', required=False, default=False, action='store_true')
args = parser.parse_args()

def pr(domain, username, ntlm, cleartext):
  if username and not args.include_machines and '$' in username:
    return None

  if args.cracked_only and not cleartext:
    return None

  delimiter = ' '
  if args.csv:
    delimiter = ','

  s = [] 
  if username:
    s.append(username)
  if ntlm:
    s.append(ntlm)
  if cleartext:
    s.append(cleartext)

  print(delimiter.join(s))


def parseDumpLine(line):
  if ':::' in line:
    parts = line.split(':')
    if len(parts) == 7:
      domain = None 
      username = parts[0] 
      ntlm = parts[3]
      if '\\' in parts[0]:
        subparts = parts[0].split('\\')
        domain = subparts[0]
        username = subparts[1]
      return (domain, username, ntlm)
  return None


def getCleartext(ntlm, crackedLines):

  ntlm = ntlm.lower()
		
  for line in crackedLines:
    line = line.lower().replace('\n','')
    if ntlm in line:
      parts = line.split(':')
      if len(parts) == 2:
        return parts[1]
      else:
        print('there is something wrong with your hashcat output! (3)', file=sys.stderr)
        sys.exit(3)
  return None

def readLines(f):
  if f:
    f.seek(0)
    l = f.readlines()
    l = [x.lower() for x in l]
    l = [x.replace('\n', '') for x in l]
    return l

dumpLines = readLines(args.dump)
enabledLines = readLines(args.enabled_users)
crackedLines = readLines(args.cracked_hashes)

ntlmOnlyList = []
if args.dump:
  for line in dumpLines:
    parts = parseDumpLine(line)
    if parts:
      domain, username, ntlm = parts 

      if args.search_ntlm:
        if not ntlm == args.search_ntlm:
          continue

      if username and (not args.include_machines) and ('$' in username):
        continue

      if args.enabled_users:
        if not username in enabledLines:
          continue

      cleartext = None
      if ntlm and args.cracked_hashes:
        cleartext = getCleartext(ntlm, crackedLines)

      if args.ntlm_only:
        if ntlm:
          if args.cracked_only and not cleartext:
              continue

          if ntlm not in ntlmOnlyList:
            ntlmOnlyList.append(ntlm)
        continue

      pr(domain, username, ntlm, cleartext)

if args.ntlm_only:
  ntlmOnlyList.sort()
  for ntlm in ntlmOnlyList:
    pr(None, None, ntlm, ' ')

